# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Edward West
# This file is distributed under the same license as the PyBroker package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyBroker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-10 15:05+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/reference/pybroker.eval.rst:2 4f14b0217a26441c8cf47cbb65cf0827
msgid "pybroker.eval module"
msgstr ""

#: 1d746fb49cf548538c56e9ae44543089 of pybroker.eval:1
msgid "Contains implementation of evaluation metrics."
msgstr ""

#: 0cb2da8e0173467a8ecb7c4fcbf241da 2ccae2a80504451f9127302c3666b409
#: 2f2d2274d9754a70a26e67e47453d047 434dcec7871b4889918abacf1d2eed7c
#: 73d0cc70001f44c4927cfe7e54c0f956 74ac170e44184ae3a501b7428b3d1dd2 of
#: pybroker.eval.BootConfIntervals:1 pybroker.eval.BootstrapResult:1
#: pybroker.eval.ConfInterval:1 pybroker.eval.DrawdownConfs:1
#: pybroker.eval.DrawdownMetrics:1 pybroker.eval.EvalResult:1
msgid "Bases: :py:class:`~typing.NamedTuple`"
msgstr ""

#: 1c74fc4edfe1405b9557344d0c388404 of pybroker.eval.BootConfIntervals:1
msgid "Holds confidence intervals of bootstrap tests."
msgstr ""

#: 0f86af7e2f954e379cbc5cab29ad7966 of pybroker.eval.BootConfIntervals:5
#, python-format
msgid "Lower bound of 97.5% confidence interval."
msgstr ""

#: 007542ce834c4a23b8f140dc9f9781f5 01fb6fa398934de3969034f0cb929a11
#: 02168ecd1f9c43d5938be446dbc59777 09f53846fd654756b5cdfb5e6c80a2fd
#: 0de9aeee3d5f4beea1800e6eb7a21ccf 13f1feacd4434ddc8ad6ea0c58af7a9e
#: 1a6d13dfa48245ac8bca842229bdd1c6 1fac9b457b144e1981898e954fae4fa4
#: 23c32b573cb74402bf4f15c8d3c1b842 3004f80e48da4990b4a554a4d7ea1a82
#: 43f2c9b9379048c78b18528a4d87687f 46f53fd89d474e2691efb8141366d057
#: 47c521763a814738b3bdedf13cf4a580 48feaf8548b64c91a38387bc6293ee94
#: 4bc13d79320043aea3e50030f9a30725 50e756fca157409887e39839f1cfc796
#: 55a04c3bea314bde8b747eefa9008b78 569332662243453ba6541f44633f8d40
#: 5b3082e15dc440e5be5b4af1eb876082 5baa6a9018d640d28526b4ddd84be532
#: 62dc1dd560414120ad4db4554fb84aef 64485012c195431e9c61bfcc93c9f215
#: 6a3eacac1a90477f96960a444f319813 6f778ed545f947ba954fda6491deafd8
#: 738897f2ce9f46a38d3feb9e1e5d5f0b 74b60acd147c4392a68e59e601c14743
#: 752dd7823251441cb362dd47723abbb4 792c2e2cd9944f86aa16e47add3880ba
#: 7a280edb681f4894becd43e7ce521f1d 7b5ba03fdf7b4b93b0fa11d977ae06d4
#: 846f55996ac846eda381a926dfd9f612 86bfe1caa3d74a26b7259c970138d8fe
#: 8f9f04091025471d8f78993128027aba 948dce21d7db4d34aaedc2dd1ee1a5c3
#: 9beafc36e442434180ccc54613440522 a2ecf40daf0a4993828d7da1c2fc4f93
#: ac6165ab07a14e96af84b36b1935511d b56b76f1971a4b9dab4167863cdfc6ae
#: b7dd5b99933d4eb981ed1239fa3d41cf b9a4c60d02ee4ee4af33453e4264b832
#: be2ea87f036c43d1a2e4eb3344a6a3f6 bf53e0d1d02248b493f5763a0b520205
#: c16e3c1eaee84fa19e1ef6c55514ac32 c6c281e3a1f14d868101124fd075d579
#: c788ce9dbf3e402bbf5847779f487b56 cbb5cf6e13284bce87e4e21845db3eb2
#: cbcab17c52384cf5a674f5993d7ecb0a cf1da5bb08aa4a42a7ff9bb389d2ceb7
#: cf296fac5f3a4abdb77451804ad219a6 d00f3375eebe447ab143935c28966b21
#: d71f88a90d2e4caabf0f218f1e69e6d9 d80f6328bd364b3aa79b31b7409f2381
#: dabb7731e87541a3bc55c784342d9aa2 e4d4061d4143424d969fe5ed1a643a05
#: f091696887464d9fb29bc0c8b4e8c62c f35b9e27a1c14a698fa2f4cf12771bf1
#: f366038961ee4d5a933ffc149a240acc f7b634643a174cc2affe75aad6266716
#: f986642b89dc4c68ab7a093d57d1accc fc60a8fc178b447bbe1c9b7cdb98c215 of
#: pybroker.eval.BootConfIntervals pybroker.eval.BootstrapResult
#: pybroker.eval.ConfInterval pybroker.eval.DrawdownConfs
#: pybroker.eval.DrawdownMetrics pybroker.eval.EvalMetrics
#: pybroker.eval.EvalResult
msgid "type"
msgstr ""

#: 0bfea2febc54492fbde997e21d1d98d4 0c1d3bbd8b1a4b209650853e3dc0b37e
#: 1124f0278ccd49b5a43d9b596db3b3a2 13e90125845547e085fc882adb860125
#: 15de09d04aa944ba9d31f7ef7ff5f947 1bdbb6d22a61454eaacdb719324fdbb5
#: 1c94bbfcd6ba4178b96763be3d06585b 216c7738759441e1963338f9f08dc977
#: 2754e3b0d0434e53bb5588c33001484d 289c2376066c4e28aa0b6007065db041
#: 3bf4a131447346c8a370233ab48e644f 41b70ab76b5c4e2399972cc76c8acfd7
#: 48d4f860987f4d9989b0e76e2f57b026 4ff032c1ddc545eea7ed3cbffc7fe3ec
#: 5ee423cfc1754699814494e744de5966 606d969680c64000a69256dcfddb4a57
#: 6e9fe1da135141f0a5b43f6ee82a5b0d 75fe1117da2b4ede856999a1a6787c29
#: 7dc4e1b4614541388c6a45a4b1436eca 869417c98aaa4e87aaf4d5cae4f1e948
#: 89329fd057fc4b93a9ab7e5b5394d8db 93f88a6f03154e6c891f82c8c27d6dff
#: 941a18052f79454bad2aa9badbd182e7 986c0a90c80e4fab8c3e8f3fdf2f97bc
#: 9a7117eba845450084527163a16dec8a a2c88b2226124a77905b705ac37d1604
#: ab7fc01a43324575a4d9ee1e9d12e623 b5c43e4647144fc0be4f96c32d0932e3
#: bb5ac9ad618947ebbee75be257f128c4 c50266afda3a46eb9d271b367b6bc13a
#: d157b94982af4bef8321c31a02024b39 d1e5376999724abe91da92e0e644a7f8
#: d65096d57c944614ab926b48810ccc4e d9e0954e88ae43fbaa561c460e4fac63
#: df1970b3e3b74aecadaf3c90ecabe9c0 e6ddf345df1f4e688c47bcf59d0b85f9
#: eefdad52e90245b6bdad356388d08a56 f7e30f2bef264900ae4b67c73374a193
#: f8ffd0d15581427ca40602ec7d5cae28 of pybroker.eval.BootConfIntervals:7
#: pybroker.eval.BootConfIntervals:13 pybroker.eval.BootConfIntervals:19
#: pybroker.eval.BootConfIntervals:25 pybroker.eval.BootConfIntervals:31
#: pybroker.eval.BootConfIntervals:37 pybroker.eval.ConfInterval:19
#: pybroker.eval.ConfInterval:25 pybroker.eval.DrawdownConfs:7
#: pybroker.eval.DrawdownConfs:13 pybroker.eval.DrawdownConfs:19
#: pybroker.eval.DrawdownConfs:25 pybroker.eval.EvalMetrics:14
#: pybroker.eval.EvalMetrics:21 pybroker.eval.EvalMetrics:27
#: pybroker.eval.EvalMetrics:33 pybroker.eval.EvalMetrics:39
#: pybroker.eval.EvalMetrics:52 pybroker.eval.EvalMetrics:58
#: pybroker.eval.EvalMetrics:65 pybroker.eval.EvalMetrics:71
#: pybroker.eval.EvalMetrics:77 pybroker.eval.EvalMetrics:83
#: pybroker.eval.EvalMetrics:89 pybroker.eval.EvalMetrics:107
#: pybroker.eval.EvalMetrics:113 pybroker.eval.EvalMetrics:119
#: pybroker.eval.EvalMetrics:125 pybroker.eval.EvalMetrics:131
#: pybroker.eval.EvalMetrics:137 pybroker.eval.EvalMetrics:143
#: pybroker.eval.EvalMetrics:149 pybroker.eval.EvalMetrics:155
#: pybroker.eval.EvalMetrics:161 pybroker.eval.EvalMetrics:167
#: pybroker.eval.EvalMetrics:179 pybroker.eval.EvalMetrics:185
#: pybroker.eval.EvalMetrics:210 pybroker.eval.EvalMetrics:217
#: pybroker.eval.EvalMetrics:229 pybroker.eval.EvalMetrics:236
#: pybroker.eval.EvalMetrics:243 pybroker.eval.EvalMetrics:250
#: pybroker.eval.EvalMetrics:257
msgid "float"
msgstr ""

#: 6ca369ef5c084d7c823e80b932d0eeae of pybroker.eval.BootConfIntervals:11
#, python-format
msgid "Upper bound of 97.5% confidence interval."
msgstr ""

#: e24494a5ba044ac1b334c59663fd89c1 of pybroker.eval.BootConfIntervals:17
#, python-format
msgid "Lower bound of 95% confidence interval."
msgstr ""

#: eb5fa88500e845de907e67ddee5739fb of pybroker.eval.BootConfIntervals:23
#, python-format
msgid "Upper bound of 95% confidence interval."
msgstr ""

#: 71c129bc694b403eb99ed5a4d958e723 of pybroker.eval.BootConfIntervals:29
#, python-format
msgid "Lower bound of 90% confidence interval."
msgstr ""

#: b4978558acab4be8838438e9098fe199 of pybroker.eval.BootConfIntervals:35
#, python-format
msgid "Upper bound of 90% confidence interval."
msgstr ""

#: 3a23cd57f32446a69921d43c1230ea6b of pybroker.eval.BootstrapResult:1
msgid "Contains results of bootstrap tests."
msgstr ""

#: 05cb2d1bb1fe42f7b5ce2d9f67a761b8 of pybroker.eval.BootstrapResult:5
msgid ""
":class:`pandas.DataFrame` containing confidence intervals for "
":func:`.log_profit_factor` and :func:`.sharpe_ratio`."
msgstr ""

#: 3dd8e44b0e4747a19a8fa5276b061f51 4d9334322bc046ef9fa329f78f2e4142 of
#: pybroker.eval.BootstrapResult:8 pybroker.eval.BootstrapResult:15
msgid "pandas.core.frame.DataFrame"
msgstr ""

#: 8a98f9c674d04d8db3d9e134bf042290 of pybroker.eval.BootstrapResult:12
msgid ""
":class:`pandas.DataFrame` containing upper bounds of confidence intervals"
" for maximum drawdown."
msgstr ""

#: d333c8dfdca14e8987f9c17de6ae3ce1 of pybroker.eval.BootstrapResult:19
msgid "Contains profit factor confidence intervals."
msgstr ""

#: 95902100b2fc458aab91270879aafaa6 b98cd149c1964778972b2efce4fb7263 of
#: pybroker.eval.BootstrapResult:21 pybroker.eval.BootstrapResult:27
msgid "pybroker.eval.BootConfIntervals"
msgstr ""

#: 5f567a55810642999e580f20f00d0b9b of pybroker.eval.BootstrapResult:25
msgid "Contains Sharpe Ratio confidence intervals."
msgstr ""

#: a769f3585b86414aa6aafd3682af020e of pybroker.eval.BootstrapResult:31
msgid "Contains drawdown confidence intervals."
msgstr ""

#: 19e7dfcaf56947bf9c86813aeadbdcde of pybroker.eval.BootstrapResult:33
msgid "pybroker.eval.DrawdownMetrics"
msgstr ""

#: 16541871bf8442d9b54791e9800205cd of pybroker.eval.ConfInterval:1
msgid "Confidence interval upper and low bounds."
msgstr ""

#: d41436ecccae4874b745710e3997c9af of pybroker.eval.ConfInterval:5
msgid "Parameter name."
msgstr ""

#: 46ab042cdb4d4911a50889381352e7d1 d86500a77f714c5d9aef106fa44a4f6b of
#: pybroker.eval.ConfInterval:7 pybroker.eval.ConfInterval:13
msgid "str"
msgstr ""

#: 0c2663379d5443cab6d97aed61c6cb67 of pybroker.eval.ConfInterval:11
msgid "Confidence interval percentage represented as a ``str``."
msgstr ""

#: f94778f0cebc4d49af05114551d782ab of pybroker.eval.ConfInterval:17
msgid "Lower bound."
msgstr ""

#: 783cf951b69741bc8fb8892c7d537f3a of pybroker.eval.ConfInterval:23
msgid "Upper bound."
msgstr ""

#: dc2ef4b4f50f43fc9d9e774a2133349b of pybroker.eval.DrawdownConfs:1
msgid "Contains upper bounds of confidence intervals for maximum drawdown."
msgstr ""

#: e5683e9ce0b841dba181edca527bd687 of pybroker.eval.DrawdownConfs:5
#, python-format
msgid "99.9% confidence upper bound."
msgstr ""

#: 62c5edc92d3441b19946bc458e182318 of pybroker.eval.DrawdownConfs:11
#, python-format
msgid "99% confidence upper bound."
msgstr ""

#: de574ffb9ce740aea80211f3941b06c9 of pybroker.eval.DrawdownConfs:17
#, python-format
msgid "95% confidence upper bound."
msgstr ""

#: de4b69dcc985441ebf32a1fbd718ae24 of pybroker.eval.DrawdownConfs:23
#, python-format
msgid "90% confidence upper bound."
msgstr ""

#: 5c96fe8426034687b246a97ced415eac of pybroker.eval.DrawdownMetrics:1
msgid "Contains drawdown metrics."
msgstr ""

#: 4c058c761d4449218ed33aabda3e776c of pybroker.eval.DrawdownMetrics:5
msgid ""
"Upper bounds of confidence intervals for maximum drawdown, measured in "
"cash."
msgstr ""

#: 4207d4c8caaf4514a31e1e477b679916 7fd6a9799702440781422b479b409a4c of
#: pybroker.eval.DrawdownMetrics:8 pybroker.eval.DrawdownMetrics:15
msgid "pybroker.eval.DrawdownConfs"
msgstr ""

#: 20a3bc72f74d4c22ac766727c614f5dd of pybroker.eval.DrawdownMetrics:12
msgid ""
"Upper bounds of confidence intervals for maximum drawdown, measured in "
"percentage."
msgstr ""

#: 59f1225460b14689b8286025e6f1a0f5 ebdaef532d24490f9c5c86ee5c8dfb92 of
#: pybroker.eval.EvalMetrics:1 pybroker.eval.EvaluateMixin:1
msgid "Bases: :py:class:`object`"
msgstr ""

#: 405e183abd5344a5bab75a30058196b5 of pybroker.eval.EvalMetrics:1
msgid "Contains metrics for evaluating a :class:`pybroker.strategy.Strategy`."
msgstr ""

#: b596c368a98a45eb974523d1cf1e671e of pybroker.eval.EvalMetrics:5
msgid "Number of trades that were filled."
msgstr ""

#: 1b1db5ca966648ccb1edd9ae92d30578 24c6affe366d4e1a9b952dd986428f9d
#: 647d742dc07148fa8537a0a9dd1037a5 9e971978cf744be7881d272f850fd47e
#: f54790033f8340c7a0a27bc2f6860007 of pybroker.eval.EvalMetrics:7
#: pybroker.eval.EvalMetrics:95 pybroker.eval.EvalMetrics:101
#: pybroker.eval.EvalMetrics:173 pybroker.eval.EvalMetrics:191
#: pybroker.eval.EvalMetrics:197 pybroker.eval.EvalMetrics:203
msgid "int"
msgstr ""

#: d55bbdd8835b4e8bbd1d50fbd223ea6b of pybroker.eval.EvalMetrics:11
msgid "Initial market value of the :class:`pybroker.portfolio.Portfolio`."
msgstr ""

#: 301aa6e156af4aa6a12b55511f951b61 of pybroker.eval.EvalMetrics:18
msgid "Ending market value of the :class:`pybroker.portfolio.Portfolio`."
msgstr ""

#: 1eb0bf2ad2e34220b981b9ba337b82e2 of pybroker.eval.EvalMetrics:25
msgid "Total realized profit and loss (PnL)."
msgstr ""

#: 41233eebb251427182f7a542a1226267 of pybroker.eval.EvalMetrics:31
msgid "Total unrealized profit and loss (PnL)."
msgstr ""

#: ffa3afd30f894badae4ba4b2ad88c6ed of pybroker.eval.EvalMetrics:37
msgid "Total realized return measured in percentage."
msgstr ""

#: d43f2995ab214f76a0f8a8a9c49e81b7 of pybroker.eval.EvalMetrics:43
msgid "Annualized total realized return measured in percentage."
msgstr ""

#: 1fd02d78a8e643d79937fe1cf741883f 51eb2a145e634fec8a93f5ab83da6ad5
#: 6bd865a3a81f41e08eef767567e525bb e0b363263f2a4698b571a7d7b44a30e2 of
#: pybroker.eval.EvalMetrics:46 pybroker.eval.EvalMetrics:223
#: pybroker.eval.EvalMetrics:264 pybroker.eval.EvalMetrics:271
msgid "float | None"
msgstr ""

#: ce2bdef5c9fd4ffc894a5419bb679c3d of pybroker.eval.EvalMetrics:50
msgid "Total realized profit."
msgstr ""

#: 5596ae799771406892de8cead6c49984 of pybroker.eval.EvalMetrics:56
msgid "Total realized loss."
msgstr ""

#: 364ff2d4041e44ee89414246edc0e196 of pybroker.eval.EvalMetrics:62
msgid ""
"Total brokerage fees. See :attr:`pybroker.config.StrategyConfig.fee_mode`"
" for more info."
msgstr ""

#: f3453d2266d74fe9b90f9412468c9743 of pybroker.eval.EvalMetrics:69
msgid "Maximum drawdown, measured in cash."
msgstr ""

#: 8c3b61a2af5c4636ac02ca7a66fc7d75 of pybroker.eval.EvalMetrics:75
msgid "Maximum drawdown, measured in percentage."
msgstr ""

#: 57f540ab690242c68b622f729e56e746 of pybroker.eval.EvalMetrics:81
msgid "Win rate of trades."
msgstr ""

#: 89fd41f0c9a64bafb6cc637338e9f783 of pybroker.eval.EvalMetrics:87
msgid "Loss rate of trades."
msgstr ""

#: 1df470443aac476cbe972d7b7e534e15 of pybroker.eval.EvalMetrics:93
msgid "Number of winning trades."
msgstr ""

#: d3bce71451494eef92d56aeca394eefa of pybroker.eval.EvalMetrics:99
msgid "Number of losing trades."
msgstr ""

#: 67c37d1bbc0b42be90e0b6dce12646dc of pybroker.eval.EvalMetrics:105
msgid "Average profit and loss (PnL) per trade, measured in cash."
msgstr ""

#: d43f2995ab214f76a0f8a8a9c49e81b7 of pybroker.eval.EvalMetrics:111
msgid "Average return per trade, measured in percentage."
msgstr ""

#: 8d50fbb075234535aa1950710af07efa of pybroker.eval.EvalMetrics:117
msgid "Average number of bars per trade."
msgstr ""

#: fb5bb4f3c56b48d0b2bac6ce2e7c8fec of pybroker.eval.EvalMetrics:123
msgid "Average profit per trade, measured in cash."
msgstr ""

#: 6cb6f3af26204373b2ab263829899cb4 of pybroker.eval.EvalMetrics:129
msgid "Average profit per trade, measured in percentage."
msgstr ""

#: ed96636ec2f44750a5b9b4496daf13a7 of pybroker.eval.EvalMetrics:135
msgid "Average number of bars per winning trade."
msgstr ""

#: 4c24dc571c7a4faeba05a96b648b8e3e of pybroker.eval.EvalMetrics:141
msgid "Average loss per trade, measured in cash."
msgstr ""

#: 5d3d418800504b1bb4bbe6704b02ed67 of pybroker.eval.EvalMetrics:147
msgid "Average loss per trade, measured in percentage."
msgstr ""

#: 739e35c0298e43eb9549e842652791ba of pybroker.eval.EvalMetrics:153
msgid "Average number of bars per losing trade."
msgstr ""

#: f54af8f60f4c4a60becbe6b2b7e3bfd0 of pybroker.eval.EvalMetrics:159
msgid "Largest profit of a trade, measured in cash."
msgstr ""

#: 4520271415a24c4da67aa802eb260525 of pybroker.eval.EvalMetrics:165
msgid "Largest profit of a trade, measured in percentage"
msgstr ""

#: 7136e9196d5b41ca872c8c0d9300eb83 of pybroker.eval.EvalMetrics:171
msgid "Number of bars in the largest winning trade."
msgstr ""

#: 8da0431c1e814489a3b84a255559dc85 of pybroker.eval.EvalMetrics:177
msgid "Largest loss of a trade, measured in cash."
msgstr ""

#: 7d7e62d1eb794e80847ac2551125c849 of pybroker.eval.EvalMetrics:183
msgid "Largest loss of a trade, measured in percentage."
msgstr ""

#: bf71292ab4054172a1128b45d5d81af9 of pybroker.eval.EvalMetrics:189
msgid "Number of bars in the largest losing trade."
msgstr ""

#: 36fe073513cb48b988c477c28375e6b4 of pybroker.eval.EvalMetrics:195
msgid "Maximum number of consecutive winning trades."
msgstr ""

#: cae7535f913142a899d75dd013544d5d of pybroker.eval.EvalMetrics:201
msgid "Maximum number of consecutive losing trades."
msgstr ""

#: 14587b9852a640e69cb99ce3c9fd7c5d of pybroker.eval.EvalMetrics:207
msgid ""
"`Sharpe Ratio <https://en.wikipedia.org/wiki/Sharpe_ratio>`_, computed "
"per bar."
msgstr ""

#: 14587b9852a640e69cb99ce3c9fd7c5d of pybroker.eval.EvalMetrics:214
msgid ""
"`Sortino Ratio <https://en.wikipedia.org/wiki/Sortino_ratio>`_, computed "
"per bar."
msgstr ""

#: c5d2b8cc633c4535a90ecf8186fc3ed7 of pybroker.eval.EvalMetrics:221
msgid "Calmar Ratio, computed per bar."
msgstr ""

#: c5d2b8cc633c4535a90ecf8186fc3ed7 of pybroker.eval.EvalMetrics:227
msgid "Ratio of gross profit to gross loss, computed per bar."
msgstr ""

#: fbd69bfe881941bb9746dc47b8b7904e of pybroker.eval.EvalMetrics:233
msgid ""
"`Ulcer Index <https://en.wikipedia.org/wiki/Ulcer_index>`_, computed per "
"bar."
msgstr ""

#: 2384f85c94e54c608aab6ac541724967 of pybroker.eval.EvalMetrics:240
msgid ""
"`Ulcer Performance Index <https://en.wikipedia.org/wiki/Ulcer_index>`_, "
"computed per bar."
msgstr ""

#: 5bc7a8d6ed534ce1970b943e2fb602e4 of pybroker.eval.EvalMetrics:247
msgid "R^2 of the equity curve, computed per bar on market values of portfolio."
msgstr ""

#: 6e61aff65a104f548310913c5ab7a5cc of pybroker.eval.EvalMetrics:254
msgid "Standard error, computed per bar on market values of portfolio."
msgstr ""

#: 6e61aff65a104f548310913c5ab7a5cc of pybroker.eval.EvalMetrics:261
msgid "Annualized standard error, computed per bar on market values of portfolio."
msgstr ""

#: 5bc7a8d6ed534ce1970b943e2fb602e4 of pybroker.eval.EvalMetrics:268
msgid ""
"Annualized volatility percentage, computed per bar on market values of "
"portfolio."
msgstr ""

#: c89e32cc37e24877b70fe3d039a33b0e of pybroker.eval.EvalResult:1
msgid "Contains evaluation result."
msgstr ""

#: 46c823aa862b40dbadc3ea9b493d521a of pybroker.eval.EvalResult:5
msgid "Evaluation metrics."
msgstr ""

#: 0cd0430644ec4764a4ed290e8b50e216 of pybroker.eval.EvalResult:7
msgid "pybroker.eval.EvalMetrics"
msgstr ""

#: 592b01bb5dea40f1b08a59998b4c6d87 of pybroker.eval.EvalResult:11
msgid "Randomized bootstrap metrics."
msgstr ""

#: 438f247cfefe43efa62db5ecda802f48 of pybroker.eval.EvalResult:13
msgid "pybroker.eval.BootstrapResult | None"
msgstr ""

#: 28b6fb3f39ce49de8333c39cd6a3400b of pybroker.eval.EvaluateMixin:1
msgid "Mixin for computing evaluation metrics."
msgstr ""

#: 6b1d1d74fb2e4a8f85dd9a43f15ebe4c of pybroker.eval.EvaluateMixin.evaluate:1
msgid "Computes evaluation metrics."
msgstr ""

#: 6faca87e257b47969ef8417b493a8582 91047e93680841038cc33dec42754b01
#: b294fab09a274484a79e2700b63bc80b of pybroker.eval.EvaluateMixin.evaluate
#: pybroker.eval.annual_total_return_percent pybroker.eval.avg_profit_loss
#: pybroker.eval.bca_boot_conf pybroker.eval.calmar_ratio
#: pybroker.eval.largest_win_loss pybroker.eval.log_profit_factor
#: pybroker.eval.max_drawdown_percent pybroker.eval.max_wins_losses
#: pybroker.eval.sharpe_ratio pybroker.eval.sortino_ratio
#: pybroker.eval.total_profit_loss pybroker.eval.total_return_percent
#: pybroker.eval.win_loss_rate pybroker.eval.winning_losing_trades
msgid "Parameters"
msgstr ""

#: 59b181d3fd4b41cf88ec53cd5c01facd of pybroker.eval.EvaluateMixin.evaluate:3
msgid ":class:`pandas.DataFrame` of portfolio market values per bar."
msgstr ""

#: eaf449c6ab5e4921bc1a5c248ce62fda of pybroker.eval.EvaluateMixin.evaluate:5
msgid ":class:`pandas.DataFrame` of trades."
msgstr ""

#: 1ec2486f38804f1880ffb5b4b19bab18 of pybroker.eval.EvaluateMixin.evaluate:6
msgid "``True`` to calculate randomized bootstrap metrics."
msgstr ""

#: b0d4efeb6e44463faa149ce5db22b0da of pybroker.eval.EvaluateMixin.evaluate:7
msgid "Size of each random bootstrap sample."
msgstr ""

#: ad83d172ecb440fbb7260ded78aa7f42 of pybroker.eval.EvaluateMixin.evaluate:8
#: pybroker.eval.bca_boot_conf:8
msgid "Number of random bootstrap samples to use."
msgstr ""

#: 28eda1116bf7421eb7e5466874b62d0e of pybroker.eval.EvaluateMixin.evaluate:9
msgid ""
"Number of observations per years that will be used to annualize "
"evaluation metrics. For example, a value of ``252`` would be used to "
"annualize the Sharpe Ratio for daily returns."
msgstr ""

#: 9c45df9414b74e7aab2802b187b6678e of pybroker.eval.EvaluateMixin.evaluate
#: pybroker.eval.avg_profit_loss pybroker.eval.bca_boot_conf
#: pybroker.eval.largest_win_loss pybroker.eval.max_wins_losses
#: pybroker.eval.total_profit_loss pybroker.eval.win_loss_rate
#: pybroker.eval.winning_losing_trades
msgid "Returns"
msgstr ""

#: 4ff1b588d73a43719daa4cd143d660bc of pybroker.eval.EvaluateMixin.evaluate:13
msgid ":class:`.EvalResult` containing evaluation metrics."
msgstr ""

#: 62f66d885dcd4e16a6d6df6705aad9f7 of
#: pybroker.eval.annual_total_return_percent:1
msgid "Computes annualized total return as percentage."
msgstr ""

#: c50ff825d35d4cafbe3aad7b27fd026b d3c1bd6099b248bba5e8d2b29789b7cf of
#: pybroker.eval.annual_total_return_percent:3
#: pybroker.eval.total_return_percent:3
msgid "Initial value."
msgstr ""

#: 63ae1fe088c94e7090985d98f1d6f61c of
#: pybroker.eval.annual_total_return_percent:4
#: pybroker.eval.total_return_percent:4
msgid "Total profit and loss (PnL)."
msgstr ""

#: 8d50fbb075234535aa1950710af07efa of
#: pybroker.eval.annual_total_return_percent:5 pybroker.eval.calmar_ratio:4
msgid "Number of bars per annum."
msgstr ""

#: 739e35c0298e43eb9549e842652791ba of
#: pybroker.eval.annual_total_return_percent:6
msgid "Total number of bars of the return."
msgstr ""

#: f7deb4716bce40f1897f9ac1c66c0ea9 of pybroker.eval.avg_profit_loss:1
msgid "Computes the average profit and average loss per trade."
msgstr ""

#: 63ae1fe088c94e7090985d98f1d6f61c of pybroker.eval.avg_profit_loss:3
#: pybroker.eval.largest_win_loss:3 pybroker.eval.max_wins_losses:3
#: pybroker.eval.total_profit_loss:3 pybroker.eval.win_loss_rate:3
#: pybroker.eval.winning_losing_trades:3
msgid "Array of profits and losses (PnLs) per trade."
msgstr ""

#: 4682548aae2f4b9987b41b2c2544cd8e of pybroker.eval.avg_profit_loss:5
msgid "``tuple[float, float]`` of average profit and average loss."
msgstr ""

#: 2739ab07062547b0a43a68d460f98575 of pybroker.eval.bca_boot_conf:1
msgid ""
"Computes confidence intervals for a user-defined parameter using the "
"`bias corrected and accelerated (BCa) bootstrap method. "
"<https://blogs.sas.com/content/iml/2017/07/12/bootstrap-bca-"
"interval.html>`_"
msgstr ""

#: 0ecbfc0f58194cea8ae13605a9750f6e of pybroker.eval.bca_boot_conf:5
msgid ""
":class:`numpy.ndarray` containing the data for the randomized bootstrap "
"sampling."
msgstr ""

#: e27347fab14b4a50899d872bd53e3e7a of pybroker.eval.bca_boot_conf:7
msgid "Number of elements in each random bootstrap sample."
msgstr ""

#: 3ddcc424ac3e444ebe47793c93029d21 of pybroker.eval.bca_boot_conf:9
msgid ""
":class:`Callable` for computing the parameter used for the confidence "
"intervals."
msgstr ""

#: b3e924cf62634deaba979ca517df9f63 of pybroker.eval.bca_boot_conf:12
msgid ":class:`.BootConfIntervals` containing the computed confidence intervals."
msgstr ""

#: 6b1d1d74fb2e4a8f85dd9a43f15ebe4c of pybroker.eval.calmar_ratio:1
msgid "Computes the Calmar Ratio."
msgstr ""

#: 69477f31eea44343bfa693f1c2b3ff74 of pybroker.eval.calmar_ratio:3
#: pybroker.eval.log_profit_factor:4 pybroker.eval.sharpe_ratio:4
#: pybroker.eval.sortino_ratio:4
msgid "Array of differences between each bar and the previous bar."
msgstr ""

#: 10f6aec5e02c4890bf11865d377fefd4 of pybroker.eval.conf_profit_factor:1
msgid "Computes confidence intervals for :func:`.profit_factor`."
msgstr ""

#: f2fc7f8732944b41b802b4274f621006 of pybroker.eval.conf_sharpe_ratio:1
msgid "Computes confidence intervals for :func:`.sharpe_ratio`."
msgstr ""

#: 6e59ba4e88d5494f8c389ed7c4edcc1b of pybroker.eval.inverse_normal_cdf:1
msgid "Computes the inverse CDF of the standard normal distribution."
msgstr ""

#: f37fcd406aab457fb74f3d2553ed57e0 of pybroker.eval.iqr:1
msgid ""
"Computes the `interquartile range (IQR) "
"<https://en.wikipedia.org/wiki/Interquartile_range>`_ of ``values``."
msgstr ""

#: f0c6a52ccead49deb5ddefe7de1d9ed0 of pybroker.eval.largest_win_loss:1
msgid "Computes the largest profit and largest loss of all trades."
msgstr ""

#: a80292674abe4a00bf048220ff6d2957 of pybroker.eval.largest_win_loss:5
msgid "``tuple[float, float]`` of largest profit and largest loss."
msgstr ""

#: a1999920f1eb4261975c7914457219f8 of pybroker.eval.log_profit_factor:1
msgid ""
"Computes the log transformed profit factor, which is the ratio of gross "
"profit to gross loss."
msgstr ""

#: 3b7a2847277043b7bc2971a5b31f3d72 of pybroker.eval.max_drawdown_percent:1
msgid "Computes maximum drawdown, measured in percentage loss."
msgstr ""

#: 0cc7855d8a594ab5990a0394bf198812 of pybroker.eval.max_drawdown_percent:3
msgid "Array of returns centered at 0."
msgstr ""

#: 95ad111c1e214355b5e811b16d004e15 of pybroker.eval.max_wins_losses:1
msgid "Computes the max consecutive wins and max consecutive losses."
msgstr ""

#: e0a1bd7cbd4e468e925f516e74e002d4 of pybroker.eval.max_wins_losses:5
msgid "``tuple[int, int]`` of max consecutive wins and max consecutive losses."
msgstr ""

#: 95400bcddf1f484fb534eaae8381e624 of pybroker.eval.normal_cdf:1
msgid "Computes the CDF of the standard normal distribution."
msgstr ""

#: b0f7b110170847c2932010d8ff66a6cf of pybroker.eval.r_squared:1
msgid "Computes R-squared of ``values``."
msgstr ""

#: 2883c26a31a04ce6b8d15776cf418d65 of pybroker.eval.relative_entropy:1
msgid ""
"Computes the relative `entropy "
"<https://en.wikipedia.org/wiki/Entropy_(information_theory)>`_."
msgstr ""

#: ce6d656049004cbaa503aeb5eb40121c of pybroker.eval.sharpe_ratio:1
msgid "Computes the `Sharpe Ratio <https://en.wikipedia.org/wiki/Sharpe_ratio>`_."
msgstr ""

#: 28c61027782e4473bedfc7ef27697c8c of pybroker.eval.sharpe_ratio:5
msgid ""
"Number of observations used to annualize the Sharpe Ratio. For example, a"
" value of ``252`` would be used to annualize daily returns."
msgstr ""

#: ce6d656049004cbaa503aeb5eb40121c of pybroker.eval.sortino_ratio:1
msgid ""
"Computes the `Sortino Ratio "
"<https://en.wikipedia.org/wiki/Sortino_ratio>`_."
msgstr ""

#: 28c61027782e4473bedfc7ef27697c8c of pybroker.eval.sortino_ratio:5
msgid ""
"Number of observations used to annualize the Sortino Ratio. For example, "
"a value of ``252`` would be used to annualize daily returns."
msgstr ""

#: b6fdb6696ca44578a5a029de03003352 of pybroker.eval.total_profit_loss:1
msgid "Computes total profit and loss."
msgstr ""

#: aca8b65a17644765a4f8f38b9f76f398 of pybroker.eval.total_profit_loss:5
msgid "``tuple[float, float]`` of total profit and total loss."
msgstr ""

#: 62f66d885dcd4e16a6d6df6705aad9f7 of pybroker.eval.total_return_percent:1
msgid "Computes total return as percentage."
msgstr ""

#: 62f66d885dcd4e16a6d6df6705aad9f7 of pybroker.eval.win_loss_rate:1
msgid "Computes the win rate and loss rate as percentages."
msgstr ""

#: ce2092bdf3aa4ba0b5542c103463fc19 of pybroker.eval.win_loss_rate:5
msgid "``tuple[float, float]`` of win rate and loss rate."
msgstr ""

#: 3b6a78f130aa486b8513d32b7d67076a of pybroker.eval.winning_losing_trades:1
msgid "Returns the number of winning and losing trades."
msgstr ""

#: 2eecfa97232c40ae88f66ddbc6685a88 of pybroker.eval.winning_losing_trades:5
msgid "``tuple[int, int]`` containing numbers of winning and losing trades."
msgstr ""

